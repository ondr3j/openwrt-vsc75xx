diff -ur linux-2.6.23.17-orig/net/ipv4/netfilter/nf_conntrack_proto_icmp.c linux-2.6.23.17/net/ipv4/netfilter/nf_conntrack_proto_icmp.c
--- linux-2.6.23.17-orig/net/ipv4/netfilter/nf_conntrack_proto_icmp.c	2010-09-10 16:39:29.691041952 +0800
+++ linux-2.6.23.17/net/ipv4/netfilter/nf_conntrack_proto_icmp.c	2010-09-10 16:40:45.506792092 +0800
@@ -80,7 +80,7 @@
 	return 0;
 }
 
-extern void (*syslog_user_access_log)(unsigned long src_addr,unsigned long dest_addr,unsigned char *mac_addr,unsigned short dst_port,int pkt_proto);
+extern void (*syslog_user_access_log)(unsigned long src_addr,unsigned long dest_addr,unsigned char *mac_addr,unsigned short dst_port,int pkt_proto,unsigned short src_port);
 /* Returns verdict for packet, or -1 for invalid. */
 static int icmp_packet(struct nf_conn *ct,
 		       const struct sk_buff *skb,
@@ -101,7 +101,7 @@
         if(syslog_user_access_log){/* Draytek :syslog utility user access log */
             struct ethhdr *eth_header = (struct ethhdr *)skb->mac_header;
             if(eth_header!=NULL)
-                syslog_user_access_log(ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip,ct->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip,eth_header->h_source,ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.icmp.type,3);
+                syslog_user_access_log(ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip,ct->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip,eth_header->h_source,ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.icmp.type,3,ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u.icmp.id);
         }
         atomic_inc(&ct->proto.icmp.count);
 		nf_conntrack_event_cache(IPCT_PROTOINFO_VOLATILE, skb);
 		
diff -ur linux-2.6.23.17-orig/net/netfilter/nf_conntrack_proto_tcp.c linux-2.6.23.17/net/netfilter/nf_conntrack_proto_tcp.c
--- linux-2.6.23.17-orig/net/netfilter/nf_conntrack_proto_tcp.c	2010-09-10 14:04:43.774791412 +0800
+++ linux-2.6.23.17/net/netfilter/nf_conntrack_proto_tcp.c	2010-09-10 15:32:04.459291765 +0800
@@ -846,7 +846,7 @@
 
 	return NF_ACCEPT;
 }
-void (*syslog_user_access_log)(unsigned long src_addr,unsigned long dest_addr,unsigned char *mac_addr,unsigned short dst_port,int pkt_proto)=NULL;
+void (*syslog_user_access_log)(unsigned long src_addr,unsigned long dest_addr,unsigned char *mac_addr,unsigned short dst_port,int pkt_proto,unsigned short src_port)=NULL;
 EXPORT_SYMBOL_GPL(syslog_user_access_log);
 /* Returns verdict for packet, or -1 for invalid. */
 static int tcp_packet(struct nf_conn *conntrack,
@@ -1037,7 +1037,7 @@
 		   connection. */
 		set_bit(IPS_ASSURED_BIT, &conntrack->status);
 		nf_conntrack_event_cache(IPCT_STATUS, skb);
-#if defined(CONFIG_STAR_SHNAT)
+#if 0 //defined(CONFIG_STAR_SHNAT)
 		if (shnat_hook_ready) {
 			/* Draytek : rate limit */
 			if (is_ratelimit_enabled()) {
@@ -1045,32 +1045,40 @@
 				/* Connection from LAN->WAN */
 				if(!check_ratelimit_range((conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip),
 						(conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip))){
-                    if(syslog_user_access_log){/* Draytek :syslog utility user access log */
-                        struct ethhdr *eth_header = (struct ethhdr *)skb->mac_header;
-                        if(eth_header!=NULL){
-                            if (CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL) {//Only LAN -> WAN
-                                syslog_user_access_log(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip,conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip,eth_header->h_source,ntohs(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.tcp.port),1);
-                            }
-                        }
-                    }
 					shnat_nf_add_session_hook(conntrack, NULL, 1);
 				}
 			} else {
-                if(syslog_user_access_log){/* Draytek :syslog utility user access log */
-                    struct ethhdr *eth_header = (struct ethhdr *)skb->mac_header;
-                    if(eth_header!=NULL){
-                        if (CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL) {//Only LAN -> WAN
-                            syslog_user_access_log(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip,conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip,eth_header->h_source,ntohs(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.tcp.port),1);
-                        }
-                    }                
-                }
                 shnat_nf_add_session_hook(conntrack, NULL, 1);
 			}
 		}
 #endif
+		if(syslog_user_access_log){/* Draytek :syslog utility user access log */
+			struct ethhdr *eth_header = (struct ethhdr *)skb->mac_header;
+ 			if(eth_header!=NULL){
+				if (CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL) {//Only LAN -> WAN
+					syslog_user_access_log(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip,conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip,eth_header->h_source,ntohs(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.tcp.port),1,ntohs(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u.tcp.port));
+				}
+			}                
+		}
 	}
 	nf_ct_refresh_acct(conntrack, ctinfo, skb, timeout);
 
+#if defined(CONFIG_STAR_SHNAT)
+		if (shnat_hook_ready && conntrack->counters[IP_CT_DIR_ORIGINAL].packets > CONFIG_STAR_SHNAT_PACKET_SKIP_COUNT) {
+			/* Draytek : rate limit */
+			if (is_ratelimit_enabled()) {
+				/* Not in bandwidth limit range then add this connection into hardware nat table. */	
+				/* Connection from LAN->WAN */
+				if(!check_ratelimit_range((conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip),
+						(conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip))){
+					shnat_nf_add_session_hook(conntrack, NULL, 1);
+				}
+			} else {
+                shnat_nf_add_session_hook(conntrack, NULL, 1);
+			}
+		}
+#endif
+
 	return NF_ACCEPT;
 }
 
diff -ur linux-2.6.23.17-orig/net/netfilter/nf_conntrack_proto_udp.c linux-2.6.23.17/net/netfilter/nf_conntrack_proto_udp.c
--- linux-2.6.23.17-orig/net/netfilter/nf_conntrack_proto_udp.c	2010-09-10 14:04:23.499041922 +0800
+++ linux-2.6.23.17/net/netfilter/nf_conntrack_proto_udp.c	2010-09-10 15:31:55.931541885 +0800
@@ -73,7 +73,7 @@
 {
 	return 0;
 }
-extern void (*syslog_user_access_log)(unsigned long src_addr,unsigned long dest_addr,unsigned char *mac_addr,unsigned short dst_port,int pkt_proto);
+extern void (*syslog_user_access_log)(unsigned long src_addr,unsigned long dest_addr,unsigned char *mac_addr,unsigned short dst_port,int pkt_proto,unsigned short src_port);
 /* Returns verdict for packet, and may modify conntracktype */
 static int udp_packet(struct nf_conn *conntrack,
 		      const struct sk_buff *skb,
@@ -94,6 +94,7 @@
 #endif
 			nf_conntrack_event_cache(IPCT_STATUS, skb);
 #if defined(CONFIG_STAR_SHNAT)
+			#if 0 // move below
 			if (shnat_hook_ready) {
 				/* Draytek : rate limit */
 				if (is_ratelimit_enabled()) {
@@ -101,30 +102,22 @@
 					if (!check_ratelimit_range((conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip),
 									(conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip))) {
 		                //printk("src=0x%x, dst=0x%x, dir=%d\r\n", conntrack->tuplehash[CTINFO2DIR(ctinfo)].tuple.src.u3.ip, conntrack->tuplehash[CTINFO2DIR(ctinfo)].tuple.dst.u3.ip, CTINFO2DIR(ctinfo));
-                        /* Draytek :syslog utility user access log */
-                        if(syslog_user_access_log){
-                            struct ethhdr *eth_header = (struct ethhdr *)skb->mac_header;
-                            if(eth_header!=NULL){
-                                if (CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL) {//Only LAN -> WAN
-                                    syslog_user_access_log(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip,conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip,eth_header->h_source,ntohs(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.udp.port),2);
-                                }                        
-                            }
-                        }
                         shnat_nf_add_session_hook(conntrack, NULL, 0);
 					}
 				}else{
-				    /* Draytek :syslog utility user access log */
-					if(syslog_user_access_log){
-                        struct ethhdr *eth_header = (struct ethhdr *)skb->mac_header;
-                        if(eth_header!=NULL){
-                            if (CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL) {//Only LAN -> WAN
-                                syslog_user_access_log(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip,conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip,eth_header->h_source,ntohs(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.udp.port),2);
-                            }
-                        }
-                    }
                     shnat_nf_add_session_hook(conntrack, NULL, 0);
                 }
 		    }
+			#endif
+			/* Draytek :syslog utility user access log */
+			if(syslog_user_access_log){
+				struct ethhdr *eth_header = (struct ethhdr *)skb->mac_header;
+				if(eth_header!=NULL){
+					if (CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL) {//Only LAN -> WAN
+						syslog_user_access_log(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip,conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip,eth_header->h_source,ntohs(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.udp.port),2,ntohs(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u.udp.port));
+					}                        
+				}
+			}
 	    }
 #endif
 	} else
@@ -138,27 +131,9 @@
 					/* Not in bandwidth limit range then add this connection into hardware nat table. */
 					if(!check_ratelimit_range((conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip),
 							(conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip))) {
-                        /* Draytek :syslog utility user access log */
-                        if(syslog_user_access_log){
-                            struct ethhdr *eth_header = (struct ethhdr *)skb->mac_header;
-                            if(eth_header!=NULL){
-                                if (CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL) {//Only LAN -> WAN
-                                    syslog_user_access_log(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip,conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip,eth_header->h_source,ntohs(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.udp.port),2);
-                                }
-                            }                       
-                        }
                         shnat_nf_add_session_hook(conntrack, NULL, 0);
 					}
 				} else {
-				    /* Draytek :syslog utility user access log */
-				    if(syslog_user_access_log){
-                        struct ethhdr *eth_header = (struct ethhdr *)skb->mac_header;
-                        if(eth_header!=NULL){
-                            if (CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL) {//Only LAN -> WAN
-                                syslog_user_access_log(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip,conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip,eth_header->h_source,ntohs(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.udp.port),2);
-                            }
-                        }                    
-                     }
 					shnat_nf_add_session_hook(conntrack, NULL, 0);
 				}
 			}
@@ -170,6 +145,21 @@
 	}
 #endif
 
+#if defined(CONFIG_STAR_SHNAT)
+	if (shnat_hook_ready && (conntrack->counters[IP_CT_DIR_REPLY].packets > CONFIG_STAR_SHNAT_PACKET_SKIP_COUNT || conntrack->counters[IP_CT_DIR_ORIGINAL].packets > CONFIG_STAR_SHNAT_PACKET_SKIP_COUNT)) {
+		/* Draytek : rate limit */
+		if (is_ratelimit_enabled()) {
+			/* Not in bandwidth limit range then add this connection into hardware nat table. */
+			if (!check_ratelimit_range((conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip),
+							(conntrack->tuplehash[IP_CT_DIR_REPLY].tuple.src.u3.ip))) {
+                //printk("src=0x%x, dst=0x%x, dir=%d\r\n", conntrack->tuplehash[CTINFO2DIR(ctinfo)].tuple.src.u3.ip, conntrack->tuplehash[CTINFO2DIR(ctinfo)].tuple.dst.u3.ip, CTINFO2DIR(ctinfo));
+                shnat_nf_add_session_hook(conntrack, NULL, 0);
+			}
+		}else{
+                shnat_nf_add_session_hook(conntrack, NULL, 0);
+        }
+    }
+#endif
 	return NF_ACCEPT;
 }
